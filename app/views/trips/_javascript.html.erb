<script type='text/javascript'>

  function autocompleted(address, field) {
    if (address.label == "New Address") {
      $( "#" + field + "-address-form" ).dialog( "open" );
    } else if (address.id) {
      //found an existing address
        id_field = '#trip_' + field + '_address_id';
      $(id_field).val(address.id);
      label_field = '#' + field + '_address_label';
      $(label_field).val(address.label);
      //close dialog
      $( "#" + field + "-address-form" ).dialog( "close" );
    } else {
      //found a geocode, fill in fields, open the dialog for saving
      $('#' + field + '_name').val(address.name);
      $('#' + field + '_building_name').val(address.building_name);
      $('#' + field + '_address').val(address.address);
      $('#' + field + '_city').val(address.city);
      $('#' + field + '_state').val(address.state);
      $('#' + field + '_zip').val(address.zip);
      $('#' + field + '_lat').val(address.lat);
      $('#' + field + '_lon').val(address.lon);
      $('#' + field + '_in_district').val(address.in_district);
      $( "#" + field + "-address-form" ).dialog( "open" );
    }
  }

  $(function() {
    
    function load_index_trips(start_time) {
      $("form.edit_trip").remove(); $("table.trips").show();
      $('a.new').show(); $('a.new').prev("hr").show();
      if (start_time) $("#calendar").weekCalendar("gotoWeek", start_time );
      $("#page-header h1").html("View Trips");
    }

    function load_edit_trip(form) {
      $('table.trips').after(form).hide();    
      $('a.new').hide(); $('a.new').prev("hr").hide();
      makeDialogs();
      makeDatePickers();

      $("#page-header h1").html("Edit Trip");
    }
    
    function push_index_state() {
       if (supports_history_api()) history.pushState({index: calendar_range}, "list trips", "<%= trips_path %>?" + $.param(calendar_range));
    }
    
    function replace_index_state() {
       if (supports_history_api()) history.replaceState({index: calendar_range}, "list trips", "<%= trips_path %>?" + $.param(calendar_range));
    }
    
    function push_edit_state(path) {
      if (supports_history_api()) history.pushState({edit: path}, "edit trip", path);
    }
    
    function on_trip_index() {
      return ($("form.edit_trip, form.new_trip").length == 0);
    }

    window.onpopstate = function(event) {
      if (event.state) {
        if (event.state['index']) load_index_trips(event.state['index'].start * 1000);
        if (event.state.edit) $.get(event.state.edit, function(data){ load_edit_trip(data.form) }, "json");
      }
    };
    
    // happens after you submit an address (not autocomplete)
    // an id should be returned, and then the form should close.
    // if no id is returned, error messages are filled in. 
    $('.address-search').live('ajax:success', function(evt, data, status, xhr){
      if (data.id) {
        //successfully created a new address
        id_field_id = $(this).attr('data-id-element');
        $(id_field_id).val(data.id);
        label_field_id = $(this).attr('data-label-element');
        $(label_field_id).val(data.label);
        //close dialog
        $($(this)[0].parentNode).dialog( "close" );
      } else {
        //failed to create an address
        for (var field in data) {
          text_field = $('#' + data.prefix + "_" + field);
          error_element = text_field.attr('data-error-element');
          if (!error_element) {
            error_element_id = data.prefix + "_" + field
            text_field.after('<span class="error" id="' + error_element_id + '">' + data[field] + "</span>");
            error_element = "#" + error_element_id;
            text_field.attr('data-error-element', error_element);
          }
          $(error_element).innerHtml = data[field]
        }
      }
    })
    
    var calendar_range;

    $('#calendar').weekCalendar({
        date: <%= @start && @start > 0 ? @start * 1000 : "new Date()" %>,
        timeslotsPerHour: 4,
        daysToShow: 5,
        firstDayOfWeek: 1,
        businessHours: {start: 8, end: 18, limitDisplay: true},
        allowCalEventOverlap: true,
        overlapEventsSeparate: true,
        headerSeparator: ", ",
        timeslotHeight: 15,
        height: function($calendar){
              calHeight = $(window).height() * 0.3 + 40;
              return calHeight;
        },
        textSize: 10,
        defaultEventLength: 3,
        readonly: true,
        eventRender : function(calEvent, $event) {
            if(calEvent.end.getTime() < new Date().getTime()) {
                $event.css({ opacity: 0.33 });
            }
        },
        eventClick: function(calEvent, element) {
          var path = "<%= edit_trip_path 'CHANGE_ME' %>".replace(/CHANGE_ME/, calEvent['id']);
          $.get(path, function(data){
            push_edit_state(path);
            load_edit_trip(data.form);
          }, "json");
        },
        data: function(start, end, callback){
          calendar_range = { start:start.getTime()/1000, end:end.getTime()/1000 };
          
          $.getJSON('<%= trips_path :json %>',
            calendar_range,
            function(data, textStatus, jqXHR){  
              // we probably didn't have the right range before, so now  we should update the state
              if ( on_trip_index() ) replace_index_state(); 
                          
              callback(data.events);              

              var table = $("#calendar").next("table");
              table.find("tr.trip").remove();
              $.each(data.rows, function(i, row){
                table.append(row);
              })
            }
          );
        }
    });
    
    $("#calendar .wc-nav button").bind("click", function(e){
      if ( on_trip_index() ) push_index_state(); 
    });

    <% if @trip.present? && @trip.pickup_time.present? %>
      $("#calendar").weekCalendar("gotoWeek", ISODateFormatToDateObject($("#trip_pickup_time").val()));
    <% end %>

    // address dialog functionality
    // via http://jqueryui.com/demos/dialog/#modal-form 
    function makeDialogs() {
      $( ".address-form" ).dialog({
          autoOpen: false,
          height: 395,
          width: 600,
          modal: true,
          buttons: {
              "Add Address": function() {
                  form = $( this )[0].children[0];
                  $(form).trigger('submit'); 
              },
              Cancel: function() {
                var prefix = $(this).attr("id").replace(/\-address\-form/, "");
                var field  = $( "#" + prefix + "_search_address" );
                field.val( field.attr("data-original-value") );
                $("#trip_" + prefix + "_address_id").val(field.attr("data-original-id"));
                $( this ).dialog( "close" );
              }
          },
          close: function() {
          }
      });
    };
    
    function makeDatePickers () {
      $('#trip_pickup_time, #trip_appointment_time').datetimepicker({
      	ampm: false,
      	hourMin: 8,
      	hourMax: 18,
    		hourGrid: 3,
      	minuteGrid: 15,
    		timeFormat: 'hh:mm',
    		dateFormat: 'yy-mm-dd',
        showOn: "button",
        buttonImage: "<%=  image_path 'calendar-clock.png' %>",
        buttonImageOnly: true,
        constrainInput: false
      });
    }
    
    makeDialogs();
    makeDatePickers();

    $('#pickup_search_address').live('railsAutocomplete.select', function(e, selected){
      autocompleted(selected, 'pickup');
    });
    
    $('#dropoff_search_address').live('railsAutocomplete.select', function(e, selected){
      autocompleted(selected, 'dropoff');
    });
    
    $('tr.trip a[data-remote]').live('ajax:success', function(e, data, status, xhr){
      push_edit_state($(this).attr("href"));
      load_edit_trip(data.form);
    });
    
    $("form.edit_trip").live('ajax:complete', function(e, data, status, xhr){
      var json = eval('(' + data.responseText + ')');
      if (json.form) {
        $("form.edit_trip").replaceWith(json.form);
        makeDialogs();
        makeDatePickers();
      } else  {
        push_index_state();
        load_index_trips(calendar_range.start * 1000);
      }
    })
  });

</script>
